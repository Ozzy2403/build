#!/bin/bash

### Calls repo start but restores working directory to original state afterwards (rather than leaving the dev branch at the manifest head)
smartstart()
{
    oldhead=`git rev-parse HEAD 2>/dev/null`
    doit() { repo start $*; git reset --hard $oldhead; }
    git stash save | grep 'No local changes to save' && doit $* || (doit $* && git stash pop)
    return $?
}

### SEXY REPO START HELPER (assumes you are starting a branch on the project you're in if you omit that argument)
rst()
{
if [ $# -eq 1 ]; then
    pushd . &> /dev/null 
    while [ 1 ]; do
        if [ -d .git ] || [ `pwd` = / ]; then break; fi
        cd ..
    done
    [ `pwd` = / ] && return 1
    currpath=`pwd`
    while [ 1 ]; do
        if [ -d .repo ] || [ `pwd` = / ]; then break; fi
        cd ..
    done
    [ `pwd` = / ] && return 1
    saferepopath=`pwd | sed 's/\//\\\\\//g'`
    popd &> /dev/null
    currpath=`echo $currpath | sed "s/$saferepopath//g" | sed 's/^\///g'`
    smartstart $1 $currpath
else
    branchname=$1
    shift
    smartstart $branchname $*
    cd $1
fi
}

### SEXY REPO UPLOAD HELPER!
rup()
{
if [ $# -eq 0 ]; then
    pushd . &> /dev/null 
    while [ 1 ]; do
        if [ -d .git ] || [ `pwd` = / ]; then break; fi
        cd ..
    done
    [ `pwd` = / ] && return 1
    currpath=`pwd`
    while [ 1 ]; do
        if [ -d .repo ] || [ `pwd` = / ]; then break; fi
        cd ..
    done
    [ `pwd` = / ] && return 1
    saferepopath=`pwd | sed 's/\//\\\\\//g'`
    currpath=`echo $currpath | sed "s/$saferepopath//g" | sed 's/^\///g'`
    repo upload $currpath
    popd &> /dev/null
else
    repo upload $*
fi
}
